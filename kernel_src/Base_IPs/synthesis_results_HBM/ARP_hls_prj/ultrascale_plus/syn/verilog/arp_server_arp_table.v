// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module arp_server_arp_table (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        networkMask_dout,
        networkMask_empty_n,
        networkMask_read,
        gatewayIP_dout,
        gatewayIP_empty_n,
        gatewayIP_read,
        myIpAddress_dout,
        myIpAddress_empty_n,
        myIpAddress_read,
        macIpEncode_i_dout,
        macIpEncode_i_empty_n,
        macIpEncode_i_read,
        arpTableInsertFifo_dout,
        arpTableInsertFifo_empty_n,
        arpTableInsertFifo_read,
        macIpEncode_rsp_i_din,
        macIpEncode_rsp_i_full_n,
        macIpEncode_rsp_i_write,
        arpTable_macAddress_address0,
        arpTable_macAddress_ce0,
        arpTable_macAddress_we0,
        arpTable_macAddress_d0,
        arpTable_macAddress_q0,
        arpTable_ipAddress_address0,
        arpTable_ipAddress_ce0,
        arpTable_ipAddress_we0,
        arpTable_ipAddress_d0,
        arpTable_ipAddress_q0,
        arpTable_valid_address0,
        arpTable_valid_ce0,
        arpTable_valid_we0,
        arpTable_valid_d0,
        arpTable_valid_q0,
        arpRequestFifo_din,
        arpRequestFifo_full_n,
        arpRequestFifo_write
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] networkMask_dout;
input   networkMask_empty_n;
output   networkMask_read;
input  [31:0] gatewayIP_dout;
input   gatewayIP_empty_n;
output   gatewayIP_read;
input  [31:0] myIpAddress_dout;
input   myIpAddress_empty_n;
output   myIpAddress_read;
input  [31:0] macIpEncode_i_dout;
input   macIpEncode_i_empty_n;
output   macIpEncode_i_read;
input  [127:0] arpTableInsertFifo_dout;
input   arpTableInsertFifo_empty_n;
output   arpTableInsertFifo_read;
output  [127:0] macIpEncode_rsp_i_din;
input   macIpEncode_rsp_i_full_n;
output   macIpEncode_rsp_i_write;
output  [7:0] arpTable_macAddress_address0;
output   arpTable_macAddress_ce0;
output   arpTable_macAddress_we0;
output  [47:0] arpTable_macAddress_d0;
input  [47:0] arpTable_macAddress_q0;
output  [7:0] arpTable_ipAddress_address0;
output   arpTable_ipAddress_ce0;
output   arpTable_ipAddress_we0;
output  [31:0] arpTable_ipAddress_d0;
input  [31:0] arpTable_ipAddress_q0;
output  [7:0] arpTable_valid_address0;
output   arpTable_valid_ce0;
output   arpTable_valid_we0;
output  [0:0] arpTable_valid_d0;
input  [0:0] arpTable_valid_q0;
output  [31:0] arpRequestFifo_din;
input   arpRequestFifo_full_n;
output   arpRequestFifo_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg networkMask_read;
reg gatewayIP_read;
reg myIpAddress_read;
reg macIpEncode_i_read;
reg arpTableInsertFifo_read;
reg macIpEncode_rsp_i_write;
reg[7:0] arpTable_macAddress_address0;
reg arpTable_macAddress_ce0;
reg arpTable_macAddress_we0;
reg[7:0] arpTable_ipAddress_address0;
reg arpTable_ipAddress_ce0;
reg arpTable_ipAddress_we0;
reg[7:0] arpTable_valid_address0;
reg arpTable_valid_ce0;
reg arpTable_valid_we0;
reg arpRequestFifo_write;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
reg   [0:0] tmp_i_reg_326;
reg   [0:0] tmp_6_i_reg_330;
reg    ap_predicate_op39_read_state2;
reg    ap_block_state2_pp0_stage1_iter0;
reg   [0:0] tmp_i_reg_326_pp0_iter1_reg;
reg   [0:0] tmp_6_i_reg_330_pp0_iter1_reg;
reg    ap_predicate_op72_write_state4;
reg    ap_block_state4_pp0_stage1_iter1;
reg    ap_done_reg;
reg    ap_block_pp0_stage1_subdone;
reg    myIpAddress_blk_n;
wire    ap_block_pp0_stage1;
reg    gatewayIP_blk_n;
reg    networkMask_blk_n;
reg    arpTableInsertFifo_blk_n;
reg    macIpEncode_i_blk_n;
reg    arpRequestFifo_blk_n;
wire    ap_block_pp0_stage0;
reg   [0:0] currEntry_valid_V_1_reg_359;
reg    macIpEncode_rsp_i_blk_n;
wire   [0:0] tmp_i_nbreadreq_fu_92_p3;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_predicate_op74_write_state5;
reg    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] tmp_6_i_nbreadreq_fu_100_p3;
reg   [31:0] query_ip_V_reg_334;
reg    ap_block_pp0_stage1_11001;
reg   [31:0] query_ip_V_reg_334_pp0_iter1_reg;
wire   [7:0] select_ln232_fu_253_p3;
reg   [7:0] select_ln232_reg_339;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln587_fu_296_p1;
wire   [63:0] zext_ln708_fu_303_p1;
reg    ap_block_pp0_stage1_01001;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] xor_ln1064_fu_215_p2;
wire   [31:0] and_ln1064_fu_221_p2;
wire   [0:0] icmp_ln1064_fu_227_p2;
wire   [7:0] tmp_7_i_fu_233_p4;
wire   [7:0] tmp_8_i_fu_243_p4;
wire   [7:0] p_Result_4_i_fu_286_p4;
wire   [96:0] tmp_9_i_fu_309_p5;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0_1to2;
reg    ap_block_pp0;
reg    ap_enable_operation_53;
reg    ap_enable_state2_pp0_iter0_stage1;
reg    ap_predicate_op61_load_state3;
reg    ap_enable_operation_61;
reg    ap_enable_state3_pp0_iter1_stage0;
reg    ap_predicate_op66_load_state4;
reg    ap_enable_operation_66;
reg    ap_enable_state4_pp0_iter1_stage1;
reg    ap_enable_operation_55;
reg    ap_predicate_op63_load_state3;
reg    ap_enable_operation_63;
reg    ap_predicate_op67_load_state4;
reg    ap_enable_operation_67;
reg    ap_enable_operation_57;
reg    ap_predicate_op65_load_state3;
reg    ap_enable_operation_65;
reg    ap_predicate_op68_load_state4;
reg    ap_enable_operation_68;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_i_reg_330_pp0_iter1_reg == 1'd1) & (tmp_i_reg_326_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        currEntry_valid_V_1_reg_359 <= arpTable_valid_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_predicate_op39_read_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        query_ip_V_reg_334 <= macIpEncode_i_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        query_ip_V_reg_334_pp0_iter1_reg <= query_ip_V_reg_334;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_i_reg_330 == 1'd1) & (tmp_i_reg_326 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        select_ln232_reg_339 <= select_ln232_fu_253_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_i_nbreadreq_fu_92_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_6_i_reg_330 <= tmp_6_i_nbreadreq_fu_100_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_6_i_reg_330_pp0_iter1_reg <= tmp_6_i_reg_330;
        tmp_i_reg_326 <= tmp_i_nbreadreq_fu_92_p3;
        tmp_i_reg_326_pp0_iter1_reg <= tmp_i_reg_326;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_6_i_reg_330_pp0_iter1_reg == 1'd1) & (tmp_i_reg_326_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (currEntry_valid_V_1_reg_359 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        arpRequestFifo_blk_n = arpRequestFifo_full_n;
    end else begin
        arpRequestFifo_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op74_write_state5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        arpRequestFifo_write = 1'b1;
    end else begin
        arpRequestFifo_write = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_reg_326 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        arpTableInsertFifo_blk_n = arpTableInsertFifo_empty_n;
    end else begin
        arpTableInsertFifo_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_i_reg_326 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        arpTableInsertFifo_read = 1'b1;
    end else begin
        arpTableInsertFifo_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        arpTable_ipAddress_address0 = zext_ln708_fu_303_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        arpTable_ipAddress_address0 = zext_ln587_fu_296_p1;
    end else begin
        arpTable_ipAddress_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        arpTable_ipAddress_ce0 = 1'b1;
    end else begin
        arpTable_ipAddress_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_reg_326 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        arpTable_ipAddress_we0 = 1'b1;
    end else begin
        arpTable_ipAddress_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        arpTable_macAddress_address0 = zext_ln708_fu_303_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        arpTable_macAddress_address0 = zext_ln587_fu_296_p1;
    end else begin
        arpTable_macAddress_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        arpTable_macAddress_ce0 = 1'b1;
    end else begin
        arpTable_macAddress_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_reg_326 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        arpTable_macAddress_we0 = 1'b1;
    end else begin
        arpTable_macAddress_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        arpTable_valid_address0 = zext_ln708_fu_303_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        arpTable_valid_address0 = zext_ln587_fu_296_p1;
    end else begin
        arpTable_valid_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        arpTable_valid_ce0 = 1'b1;
    end else begin
        arpTable_valid_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_reg_326 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        arpTable_valid_we0 = 1'b1;
    end else begin
        arpTable_valid_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        gatewayIP_blk_n = gatewayIP_empty_n;
    end else begin
        gatewayIP_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        gatewayIP_read = 1'b1;
    end else begin
        gatewayIP_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op39_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        macIpEncode_i_blk_n = macIpEncode_i_empty_n;
    end else begin
        macIpEncode_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op39_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        macIpEncode_i_read = 1'b1;
    end else begin
        macIpEncode_i_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op72_write_state4 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        macIpEncode_rsp_i_blk_n = macIpEncode_rsp_i_full_n;
    end else begin
        macIpEncode_rsp_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op72_write_state4 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        macIpEncode_rsp_i_write = 1'b1;
    end else begin
        macIpEncode_rsp_i_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        myIpAddress_blk_n = myIpAddress_empty_n;
    end else begin
        myIpAddress_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        myIpAddress_read = 1'b1;
    end else begin
        myIpAddress_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        networkMask_blk_n = networkMask_empty_n;
    end else begin
        networkMask_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        networkMask_read = 1'b1;
    end else begin
        networkMask_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln1064_fu_221_p2 = (xor_ln1064_fu_215_p2 & networkMask_dout);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_pp0 = (((ap_ST_fsm_pp0_stage1 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage1_subdone)) | ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone)));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_done_reg == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op74_write_state5 == 1'b1) & (arpRequestFifo_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_done_reg == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op74_write_state5 == 1'b1) & (arpRequestFifo_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_done_reg == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op74_write_state5 == 1'b1) & (arpRequestFifo_full_n == 1'b0)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((ap_done_reg == 1'b1) | ((ap_predicate_op72_write_state4 == 1'b1) & (macIpEncode_rsp_i_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((myIpAddress_empty_n == 1'b0) | (gatewayIP_empty_n == 1'b0) | (networkMask_empty_n == 1'b0) | ((arpTableInsertFifo_empty_n == 1'b0) & (tmp_i_reg_326 == 1'd1)) | ((ap_predicate_op39_read_state2 == 1'b1) & (macIpEncode_i_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_done_reg == 1'b1) | ((ap_predicate_op72_write_state4 == 1'b1) & (macIpEncode_rsp_i_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((myIpAddress_empty_n == 1'b0) | (gatewayIP_empty_n == 1'b0) | (networkMask_empty_n == 1'b0) | ((arpTableInsertFifo_empty_n == 1'b0) & (tmp_i_reg_326 == 1'd1)) | ((ap_predicate_op39_read_state2 == 1'b1) & (macIpEncode_i_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_done_reg == 1'b1) | ((ap_predicate_op72_write_state4 == 1'b1) & (macIpEncode_rsp_i_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((myIpAddress_empty_n == 1'b0) | (gatewayIP_empty_n == 1'b0) | (networkMask_empty_n == 1'b0) | ((arpTableInsertFifo_empty_n == 1'b0) & (tmp_i_reg_326 == 1'd1)) | ((ap_predicate_op39_read_state2 == 1'b1) & (macIpEncode_i_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = ((myIpAddress_empty_n == 1'b0) | (gatewayIP_empty_n == 1'b0) | (networkMask_empty_n == 1'b0) | ((arpTableInsertFifo_empty_n == 1'b0) & (tmp_i_reg_326 == 1'd1)) | ((ap_predicate_op39_read_state2 == 1'b1) & (macIpEncode_i_empty_n == 1'b0)));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage1_iter1 = ((ap_predicate_op72_write_state4 == 1'b1) & (macIpEncode_rsp_i_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter2 = ((ap_predicate_op74_write_state5 == 1'b1) & (arpRequestFifo_full_n == 1'b0));
end

always @ (*) begin
    ap_enable_operation_53 = (tmp_i_reg_326 == 1'd1);
end

always @ (*) begin
    ap_enable_operation_55 = (tmp_i_reg_326 == 1'd1);
end

always @ (*) begin
    ap_enable_operation_57 = (tmp_i_reg_326 == 1'd1);
end

always @ (*) begin
    ap_enable_operation_61 = (ap_predicate_op61_load_state3 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_63 = (ap_predicate_op63_load_state3 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_65 = (ap_predicate_op65_load_state3 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_66 = (ap_predicate_op66_load_state4 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_67 = (ap_predicate_op67_load_state4 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_68 = (ap_predicate_op68_load_state4 == 1'b1);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state2_pp0_iter0_stage1 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_enable_state3_pp0_iter1_stage0 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state4_pp0_iter1_stage1 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_predicate_op39_read_state2 = ((tmp_6_i_reg_330 == 1'd1) & (tmp_i_reg_326 == 1'd0));
end

always @ (*) begin
    ap_predicate_op61_load_state3 = ((tmp_6_i_reg_330 == 1'd1) & (tmp_i_reg_326 == 1'd0));
end

always @ (*) begin
    ap_predicate_op63_load_state3 = ((tmp_6_i_reg_330 == 1'd1) & (tmp_i_reg_326 == 1'd0));
end

always @ (*) begin
    ap_predicate_op65_load_state3 = ((tmp_6_i_reg_330 == 1'd1) & (tmp_i_reg_326 == 1'd0));
end

always @ (*) begin
    ap_predicate_op66_load_state4 = ((tmp_6_i_reg_330_pp0_iter1_reg == 1'd1) & (tmp_i_reg_326_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op67_load_state4 = ((tmp_6_i_reg_330_pp0_iter1_reg == 1'd1) & (tmp_i_reg_326_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op68_load_state4 = ((tmp_6_i_reg_330_pp0_iter1_reg == 1'd1) & (tmp_i_reg_326_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op72_write_state4 = ((tmp_6_i_reg_330_pp0_iter1_reg == 1'd1) & (tmp_i_reg_326_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op74_write_state5 = ((tmp_6_i_reg_330_pp0_iter1_reg == 1'd1) & (tmp_i_reg_326_pp0_iter1_reg == 1'd0) & (currEntry_valid_V_1_reg_359 == 1'd0));
end

assign arpRequestFifo_din = query_ip_V_reg_334_pp0_iter1_reg;

assign arpTable_ipAddress_d0 = {{arpTableInsertFifo_dout[95:64]}};

assign arpTable_macAddress_d0 = arpTableInsertFifo_dout[47:0];

assign arpTable_valid_d0 = arpTableInsertFifo_dout[32'd96];

assign icmp_ln1064_fu_227_p2 = ((and_ln1064_fu_221_p2 == 32'd0) ? 1'b1 : 1'b0);

assign macIpEncode_rsp_i_din = tmp_9_i_fu_309_p5;

assign p_Result_4_i_fu_286_p4 = {{arpTableInsertFifo_dout[95:88]}};

assign select_ln232_fu_253_p3 = ((icmp_ln1064_fu_227_p2[0:0] == 1'b1) ? tmp_7_i_fu_233_p4 : tmp_8_i_fu_243_p4);

assign tmp_6_i_nbreadreq_fu_100_p3 = macIpEncode_i_empty_n;

assign tmp_7_i_fu_233_p4 = {{macIpEncode_i_dout[31:24]}};

assign tmp_8_i_fu_243_p4 = {{gatewayIP_dout[31:24]}};

assign tmp_9_i_fu_309_p5 = {{{{arpTable_valid_q0}, {arpTable_ipAddress_q0}}, {16'd0}}, {arpTable_macAddress_q0}};

assign tmp_i_nbreadreq_fu_92_p3 = arpTableInsertFifo_empty_n;

assign xor_ln1064_fu_215_p2 = (myIpAddress_dout ^ macIpEncode_i_dout);

assign zext_ln587_fu_296_p1 = p_Result_4_i_fu_286_p4;

assign zext_ln708_fu_303_p1 = select_ln232_reg_339;

endmodule //arp_server_arp_table
