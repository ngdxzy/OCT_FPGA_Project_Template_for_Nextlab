-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity arp_server_arp_table is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    networkMask_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    networkMask_empty_n : IN STD_LOGIC;
    networkMask_read : OUT STD_LOGIC;
    gatewayIP_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    gatewayIP_empty_n : IN STD_LOGIC;
    gatewayIP_read : OUT STD_LOGIC;
    myIpAddress_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    myIpAddress_empty_n : IN STD_LOGIC;
    myIpAddress_read : OUT STD_LOGIC;
    macIpEncode_i_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    macIpEncode_i_empty_n : IN STD_LOGIC;
    macIpEncode_i_read : OUT STD_LOGIC;
    arpTableInsertFifo_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    arpTableInsertFifo_empty_n : IN STD_LOGIC;
    arpTableInsertFifo_read : OUT STD_LOGIC;
    macIpEncode_rsp_i_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    macIpEncode_rsp_i_full_n : IN STD_LOGIC;
    macIpEncode_rsp_i_write : OUT STD_LOGIC;
    arpTable_macAddress_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    arpTable_macAddress_ce0 : OUT STD_LOGIC;
    arpTable_macAddress_we0 : OUT STD_LOGIC;
    arpTable_macAddress_d0 : OUT STD_LOGIC_VECTOR (47 downto 0);
    arpTable_macAddress_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    arpTable_ipAddress_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    arpTable_ipAddress_ce0 : OUT STD_LOGIC;
    arpTable_ipAddress_we0 : OUT STD_LOGIC;
    arpTable_ipAddress_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    arpTable_ipAddress_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    arpTable_valid_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    arpTable_valid_ce0 : OUT STD_LOGIC;
    arpTable_valid_we0 : OUT STD_LOGIC;
    arpTable_valid_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    arpTable_valid_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    arpRequestFifo_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    arpRequestFifo_full_n : IN STD_LOGIC;
    arpRequestFifo_write : OUT STD_LOGIC );
end;


architecture behav of arp_server_arp_table is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal tmp_i_reg_326 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_i_reg_330 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op39_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal tmp_i_reg_326_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_i_reg_330_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op72_write_state4 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal myIpAddress_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal gatewayIP_blk_n : STD_LOGIC;
    signal networkMask_blk_n : STD_LOGIC;
    signal arpTableInsertFifo_blk_n : STD_LOGIC;
    signal macIpEncode_i_blk_n : STD_LOGIC;
    signal arpRequestFifo_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal currEntry_valid_V_1_reg_359 : STD_LOGIC_VECTOR (0 downto 0);
    signal macIpEncode_rsp_i_blk_n : STD_LOGIC;
    signal tmp_i_nbreadreq_fu_92_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_predicate_op74_write_state5 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_6_i_nbreadreq_fu_100_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal query_ip_V_reg_334 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal query_ip_V_reg_334_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln232_fu_253_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln232_reg_339 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln587_fu_296_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln708_fu_303_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal xor_ln1064_fu_215_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln1064_fu_221_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1064_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_i_fu_233_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_i_fu_243_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_4_i_fu_286_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_i_fu_309_p5 : STD_LOGIC_VECTOR (96 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_53 : BOOLEAN;
    signal ap_enable_state2_pp0_iter0_stage1 : BOOLEAN;
    signal ap_predicate_op61_load_state3 : BOOLEAN;
    signal ap_enable_operation_61 : BOOLEAN;
    signal ap_enable_state3_pp0_iter1_stage0 : BOOLEAN;
    signal ap_predicate_op66_load_state4 : BOOLEAN;
    signal ap_enable_operation_66 : BOOLEAN;
    signal ap_enable_state4_pp0_iter1_stage1 : BOOLEAN;
    signal ap_enable_operation_55 : BOOLEAN;
    signal ap_predicate_op63_load_state3 : BOOLEAN;
    signal ap_enable_operation_63 : BOOLEAN;
    signal ap_predicate_op67_load_state4 : BOOLEAN;
    signal ap_enable_operation_67 : BOOLEAN;
    signal ap_enable_operation_57 : BOOLEAN;
    signal ap_predicate_op65_load_state3 : BOOLEAN;
    signal ap_enable_operation_65 : BOOLEAN;
    signal ap_predicate_op68_load_state4 : BOOLEAN;
    signal ap_enable_operation_68 : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_6_i_reg_330_pp0_iter1_reg = ap_const_lv1_1) and (tmp_i_reg_326_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                currEntry_valid_V_1_reg_359 <= arpTable_valid_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_predicate_op39_read_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                query_ip_V_reg_334 <= macIpEncode_i_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                query_ip_V_reg_334_pp0_iter1_reg <= query_ip_V_reg_334;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_6_i_reg_330 = ap_const_lv1_1) and (tmp_i_reg_326 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                select_ln232_reg_339 <= select_ln232_fu_253_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_i_nbreadreq_fu_92_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_6_i_reg_330 <= tmp_6_i_nbreadreq_fu_100_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_6_i_reg_330_pp0_iter1_reg <= tmp_6_i_reg_330;
                tmp_i_reg_326 <= tmp_i_nbreadreq_fu_92_p3;
                tmp_i_reg_326_pp0_iter1_reg <= tmp_i_reg_326;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0, ap_idle_pp0_1to2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    and_ln1064_fu_221_p2 <= (xor_ln1064_fu_215_p2 and networkMask_dout);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= (((ap_ST_fsm_pp0_stage1 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage1_subdone)) or ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone)));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_done_reg, arpRequestFifo_full_n, ap_predicate_op74_write_state5)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_done_reg = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op74_write_state5 = ap_const_boolean_1) and (arpRequestFifo_full_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_done_reg, arpRequestFifo_full_n, ap_predicate_op74_write_state5)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_done_reg = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op74_write_state5 = ap_const_boolean_1) and (arpRequestFifo_full_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_done_reg, arpRequestFifo_full_n, ap_predicate_op74_write_state5)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_done_reg = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op74_write_state5 = ap_const_boolean_1) and (arpRequestFifo_full_n = ap_const_logic_0)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, networkMask_empty_n, gatewayIP_empty_n, myIpAddress_empty_n, macIpEncode_i_empty_n, tmp_i_reg_326, ap_predicate_op39_read_state2, arpTableInsertFifo_empty_n, macIpEncode_rsp_i_full_n, ap_predicate_op72_write_state4, ap_done_reg)
    begin
                ap_block_pp0_stage1_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op72_write_state4 = ap_const_boolean_1) and (macIpEncode_rsp_i_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((myIpAddress_empty_n = ap_const_logic_0) or (gatewayIP_empty_n = ap_const_logic_0) or (networkMask_empty_n = ap_const_logic_0) or ((arpTableInsertFifo_empty_n = ap_const_logic_0) and (tmp_i_reg_326 = ap_const_lv1_1)) or ((ap_predicate_op39_read_state2 = ap_const_boolean_1) and (macIpEncode_i_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, networkMask_empty_n, gatewayIP_empty_n, myIpAddress_empty_n, macIpEncode_i_empty_n, tmp_i_reg_326, ap_predicate_op39_read_state2, arpTableInsertFifo_empty_n, macIpEncode_rsp_i_full_n, ap_predicate_op72_write_state4, ap_done_reg)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op72_write_state4 = ap_const_boolean_1) and (macIpEncode_rsp_i_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((myIpAddress_empty_n = ap_const_logic_0) or (gatewayIP_empty_n = ap_const_logic_0) or (networkMask_empty_n = ap_const_logic_0) or ((arpTableInsertFifo_empty_n = ap_const_logic_0) and (tmp_i_reg_326 = ap_const_lv1_1)) or ((ap_predicate_op39_read_state2 = ap_const_boolean_1) and (macIpEncode_i_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, networkMask_empty_n, gatewayIP_empty_n, myIpAddress_empty_n, macIpEncode_i_empty_n, tmp_i_reg_326, ap_predicate_op39_read_state2, arpTableInsertFifo_empty_n, macIpEncode_rsp_i_full_n, ap_predicate_op72_write_state4, ap_done_reg)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op72_write_state4 = ap_const_boolean_1) and (macIpEncode_rsp_i_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((myIpAddress_empty_n = ap_const_logic_0) or (gatewayIP_empty_n = ap_const_logic_0) or (networkMask_empty_n = ap_const_logic_0) or ((arpTableInsertFifo_empty_n = ap_const_logic_0) and (tmp_i_reg_326 = ap_const_lv1_1)) or ((ap_predicate_op39_read_state2 = ap_const_boolean_1) and (macIpEncode_i_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_pp0_stage1_iter0_assign_proc : process(networkMask_empty_n, gatewayIP_empty_n, myIpAddress_empty_n, macIpEncode_i_empty_n, tmp_i_reg_326, ap_predicate_op39_read_state2, arpTableInsertFifo_empty_n)
    begin
                ap_block_state2_pp0_stage1_iter0 <= ((myIpAddress_empty_n = ap_const_logic_0) or (gatewayIP_empty_n = ap_const_logic_0) or (networkMask_empty_n = ap_const_logic_0) or ((arpTableInsertFifo_empty_n = ap_const_logic_0) and (tmp_i_reg_326 = ap_const_lv1_1)) or ((ap_predicate_op39_read_state2 = ap_const_boolean_1) and (macIpEncode_i_empty_n = ap_const_logic_0)));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage1_iter1_assign_proc : process(macIpEncode_rsp_i_full_n, ap_predicate_op72_write_state4)
    begin
                ap_block_state4_pp0_stage1_iter1 <= ((ap_predicate_op72_write_state4 = ap_const_boolean_1) and (macIpEncode_rsp_i_full_n = ap_const_logic_0));
    end process;


    ap_block_state5_pp0_stage0_iter2_assign_proc : process(arpRequestFifo_full_n, ap_predicate_op74_write_state5)
    begin
                ap_block_state5_pp0_stage0_iter2 <= ((ap_predicate_op74_write_state5 = ap_const_boolean_1) and (arpRequestFifo_full_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_done_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_enable_operation_53_assign_proc : process(tmp_i_reg_326)
    begin
                ap_enable_operation_53 <= (tmp_i_reg_326 = ap_const_lv1_1);
    end process;


    ap_enable_operation_55_assign_proc : process(tmp_i_reg_326)
    begin
                ap_enable_operation_55 <= (tmp_i_reg_326 = ap_const_lv1_1);
    end process;


    ap_enable_operation_57_assign_proc : process(tmp_i_reg_326)
    begin
                ap_enable_operation_57 <= (tmp_i_reg_326 = ap_const_lv1_1);
    end process;


    ap_enable_operation_61_assign_proc : process(ap_predicate_op61_load_state3)
    begin
                ap_enable_operation_61 <= (ap_predicate_op61_load_state3 = ap_const_boolean_1);
    end process;


    ap_enable_operation_63_assign_proc : process(ap_predicate_op63_load_state3)
    begin
                ap_enable_operation_63 <= (ap_predicate_op63_load_state3 = ap_const_boolean_1);
    end process;


    ap_enable_operation_65_assign_proc : process(ap_predicate_op65_load_state3)
    begin
                ap_enable_operation_65 <= (ap_predicate_op65_load_state3 = ap_const_boolean_1);
    end process;


    ap_enable_operation_66_assign_proc : process(ap_predicate_op66_load_state4)
    begin
                ap_enable_operation_66 <= (ap_predicate_op66_load_state4 = ap_const_boolean_1);
    end process;


    ap_enable_operation_67_assign_proc : process(ap_predicate_op67_load_state4)
    begin
                ap_enable_operation_67 <= (ap_predicate_op67_load_state4 = ap_const_boolean_1);
    end process;


    ap_enable_operation_68_assign_proc : process(ap_predicate_op68_load_state4)
    begin
                ap_enable_operation_68 <= (ap_predicate_op68_load_state4 = ap_const_boolean_1);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_enable_state2_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1)
    begin
                ap_enable_state2_pp0_iter0_stage1 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_enable_state3_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_enable_state3_pp0_iter1_stage0 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state4_pp0_iter1_stage1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1)
    begin
                ap_enable_state4_pp0_iter1_stage1 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op39_read_state2_assign_proc : process(tmp_i_reg_326, tmp_6_i_reg_330)
    begin
                ap_predicate_op39_read_state2 <= ((tmp_6_i_reg_330 = ap_const_lv1_1) and (tmp_i_reg_326 = ap_const_lv1_0));
    end process;


    ap_predicate_op61_load_state3_assign_proc : process(tmp_i_reg_326, tmp_6_i_reg_330)
    begin
                ap_predicate_op61_load_state3 <= ((tmp_6_i_reg_330 = ap_const_lv1_1) and (tmp_i_reg_326 = ap_const_lv1_0));
    end process;


    ap_predicate_op63_load_state3_assign_proc : process(tmp_i_reg_326, tmp_6_i_reg_330)
    begin
                ap_predicate_op63_load_state3 <= ((tmp_6_i_reg_330 = ap_const_lv1_1) and (tmp_i_reg_326 = ap_const_lv1_0));
    end process;


    ap_predicate_op65_load_state3_assign_proc : process(tmp_i_reg_326, tmp_6_i_reg_330)
    begin
                ap_predicate_op65_load_state3 <= ((tmp_6_i_reg_330 = ap_const_lv1_1) and (tmp_i_reg_326 = ap_const_lv1_0));
    end process;


    ap_predicate_op66_load_state4_assign_proc : process(tmp_i_reg_326_pp0_iter1_reg, tmp_6_i_reg_330_pp0_iter1_reg)
    begin
                ap_predicate_op66_load_state4 <= ((tmp_6_i_reg_330_pp0_iter1_reg = ap_const_lv1_1) and (tmp_i_reg_326_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op67_load_state4_assign_proc : process(tmp_i_reg_326_pp0_iter1_reg, tmp_6_i_reg_330_pp0_iter1_reg)
    begin
                ap_predicate_op67_load_state4 <= ((tmp_6_i_reg_330_pp0_iter1_reg = ap_const_lv1_1) and (tmp_i_reg_326_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op68_load_state4_assign_proc : process(tmp_i_reg_326_pp0_iter1_reg, tmp_6_i_reg_330_pp0_iter1_reg)
    begin
                ap_predicate_op68_load_state4 <= ((tmp_6_i_reg_330_pp0_iter1_reg = ap_const_lv1_1) and (tmp_i_reg_326_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op72_write_state4_assign_proc : process(tmp_i_reg_326_pp0_iter1_reg, tmp_6_i_reg_330_pp0_iter1_reg)
    begin
                ap_predicate_op72_write_state4 <= ((tmp_6_i_reg_330_pp0_iter1_reg = ap_const_lv1_1) and (tmp_i_reg_326_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op74_write_state5_assign_proc : process(tmp_i_reg_326_pp0_iter1_reg, tmp_6_i_reg_330_pp0_iter1_reg, currEntry_valid_V_1_reg_359)
    begin
                ap_predicate_op74_write_state5 <= ((tmp_6_i_reg_330_pp0_iter1_reg = ap_const_lv1_1) and (tmp_i_reg_326_pp0_iter1_reg = ap_const_lv1_0) and (currEntry_valid_V_1_reg_359 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    arpRequestFifo_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, tmp_i_reg_326_pp0_iter1_reg, tmp_6_i_reg_330_pp0_iter1_reg, arpRequestFifo_full_n, ap_block_pp0_stage0, currEntry_valid_V_1_reg_359)
    begin
        if (((tmp_6_i_reg_330_pp0_iter1_reg = ap_const_lv1_1) and (tmp_i_reg_326_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (currEntry_valid_V_1_reg_359 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            arpRequestFifo_blk_n <= arpRequestFifo_full_n;
        else 
            arpRequestFifo_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    arpRequestFifo_din <= query_ip_V_reg_334_pp0_iter1_reg;

    arpRequestFifo_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_predicate_op74_write_state5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op74_write_state5 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            arpRequestFifo_write <= ap_const_logic_1;
        else 
            arpRequestFifo_write <= ap_const_logic_0;
        end if; 
    end process;


    arpTableInsertFifo_blk_n_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, tmp_i_reg_326, arpTableInsertFifo_empty_n, ap_block_pp0_stage1)
    begin
        if (((tmp_i_reg_326 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            arpTableInsertFifo_blk_n <= arpTableInsertFifo_empty_n;
        else 
            arpTableInsertFifo_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    arpTableInsertFifo_read_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, tmp_i_reg_326, ap_block_pp0_stage1_11001)
    begin
        if (((tmp_i_reg_326 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            arpTableInsertFifo_read <= ap_const_logic_1;
        else 
            arpTableInsertFifo_read <= ap_const_logic_0;
        end if; 
    end process;


    arpTable_ipAddress_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, zext_ln587_fu_296_p1, zext_ln708_fu_303_p1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            arpTable_ipAddress_address0 <= zext_ln708_fu_303_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            arpTable_ipAddress_address0 <= zext_ln587_fu_296_p1(8 - 1 downto 0);
        else 
            arpTable_ipAddress_address0 <= "XXXXXXXX";
        end if; 
    end process;


    arpTable_ipAddress_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            arpTable_ipAddress_ce0 <= ap_const_logic_1;
        else 
            arpTable_ipAddress_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    arpTable_ipAddress_d0 <= arpTableInsertFifo_dout(95 downto 64);

    arpTable_ipAddress_we0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, tmp_i_reg_326, ap_block_pp0_stage1_11001)
    begin
        if (((tmp_i_reg_326 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            arpTable_ipAddress_we0 <= ap_const_logic_1;
        else 
            arpTable_ipAddress_we0 <= ap_const_logic_0;
        end if; 
    end process;


    arpTable_macAddress_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, zext_ln587_fu_296_p1, zext_ln708_fu_303_p1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            arpTable_macAddress_address0 <= zext_ln708_fu_303_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            arpTable_macAddress_address0 <= zext_ln587_fu_296_p1(8 - 1 downto 0);
        else 
            arpTable_macAddress_address0 <= "XXXXXXXX";
        end if; 
    end process;


    arpTable_macAddress_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            arpTable_macAddress_ce0 <= ap_const_logic_1;
        else 
            arpTable_macAddress_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    arpTable_macAddress_d0 <= arpTableInsertFifo_dout(48 - 1 downto 0);

    arpTable_macAddress_we0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, tmp_i_reg_326, ap_block_pp0_stage1_11001)
    begin
        if (((tmp_i_reg_326 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            arpTable_macAddress_we0 <= ap_const_logic_1;
        else 
            arpTable_macAddress_we0 <= ap_const_logic_0;
        end if; 
    end process;


    arpTable_valid_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, zext_ln587_fu_296_p1, zext_ln708_fu_303_p1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            arpTable_valid_address0 <= zext_ln708_fu_303_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            arpTable_valid_address0 <= zext_ln587_fu_296_p1(8 - 1 downto 0);
        else 
            arpTable_valid_address0 <= "XXXXXXXX";
        end if; 
    end process;


    arpTable_valid_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            arpTable_valid_ce0 <= ap_const_logic_1;
        else 
            arpTable_valid_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    arpTable_valid_d0 <= arpTableInsertFifo_dout(96 downto 96);

    arpTable_valid_we0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, tmp_i_reg_326, ap_block_pp0_stage1_11001)
    begin
        if (((tmp_i_reg_326 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            arpTable_valid_we0 <= ap_const_logic_1;
        else 
            arpTable_valid_we0 <= ap_const_logic_0;
        end if; 
    end process;


    gatewayIP_blk_n_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, gatewayIP_empty_n, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            gatewayIP_blk_n <= gatewayIP_empty_n;
        else 
            gatewayIP_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    gatewayIP_read_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            gatewayIP_read <= ap_const_logic_1;
        else 
            gatewayIP_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1064_fu_227_p2 <= "1" when (and_ln1064_fu_221_p2 = ap_const_lv32_0) else "0";

    macIpEncode_i_blk_n_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, macIpEncode_i_empty_n, ap_predicate_op39_read_state2, ap_block_pp0_stage1)
    begin
        if (((ap_predicate_op39_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            macIpEncode_i_blk_n <= macIpEncode_i_empty_n;
        else 
            macIpEncode_i_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    macIpEncode_i_read_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_predicate_op39_read_state2, ap_block_pp0_stage1_11001)
    begin
        if (((ap_predicate_op39_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            macIpEncode_i_read <= ap_const_logic_1;
        else 
            macIpEncode_i_read <= ap_const_logic_0;
        end if; 
    end process;


    macIpEncode_rsp_i_blk_n_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, macIpEncode_rsp_i_full_n, ap_predicate_op72_write_state4, ap_block_pp0_stage1)
    begin
        if (((ap_predicate_op72_write_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            macIpEncode_rsp_i_blk_n <= macIpEncode_rsp_i_full_n;
        else 
            macIpEncode_rsp_i_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    macIpEncode_rsp_i_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_i_fu_309_p5),128));

    macIpEncode_rsp_i_write_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_predicate_op72_write_state4, ap_block_pp0_stage1_11001)
    begin
        if (((ap_predicate_op72_write_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            macIpEncode_rsp_i_write <= ap_const_logic_1;
        else 
            macIpEncode_rsp_i_write <= ap_const_logic_0;
        end if; 
    end process;


    myIpAddress_blk_n_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, myIpAddress_empty_n, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            myIpAddress_blk_n <= myIpAddress_empty_n;
        else 
            myIpAddress_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    myIpAddress_read_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            myIpAddress_read <= ap_const_logic_1;
        else 
            myIpAddress_read <= ap_const_logic_0;
        end if; 
    end process;


    networkMask_blk_n_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, networkMask_empty_n, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            networkMask_blk_n <= networkMask_empty_n;
        else 
            networkMask_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    networkMask_read_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            networkMask_read <= ap_const_logic_1;
        else 
            networkMask_read <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_4_i_fu_286_p4 <= arpTableInsertFifo_dout(95 downto 88);
    select_ln232_fu_253_p3 <= 
        tmp_7_i_fu_233_p4 when (icmp_ln1064_fu_227_p2(0) = '1') else 
        tmp_8_i_fu_243_p4;
    tmp_6_i_nbreadreq_fu_100_p3 <= (0=>(macIpEncode_i_empty_n), others=>'-');
    tmp_7_i_fu_233_p4 <= macIpEncode_i_dout(31 downto 24);
    tmp_8_i_fu_243_p4 <= gatewayIP_dout(31 downto 24);
    tmp_9_i_fu_309_p5 <= (((arpTable_valid_q0 & arpTable_ipAddress_q0) & ap_const_lv16_0) & arpTable_macAddress_q0);
    tmp_i_nbreadreq_fu_92_p3 <= (0=>(arpTableInsertFifo_empty_n), others=>'-');
    xor_ln1064_fu_215_p2 <= (myIpAddress_dout xor macIpEncode_i_dout);
    zext_ln587_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_4_i_fu_286_p4),64));
    zext_ln708_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln232_reg_339),64));
end behav;
